package ${package}.${moduleName}.service.impl;

import com.bettem.common.utils.Constant;
import com.bettem.common.utils.ShiroTokenUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Map;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.Query;

import ${package}.${moduleName}.dao.${className}Dao;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import org.springframework.transaction.annotation.Transactional;


@Service("${classname}Service")
public class ${className}ServiceImpl extends ServiceImpl<${className}Dao, ${className}Entity> implements ${className}Service {

    @Autowired
    private ShiroTokenUtils shiroTokenUtils;

    @Override
    public PageUtils queryPage(Map<String, Object> params) {
        Page<${className}Entity> page = this.selectPage(
                new Query<${className}Entity>(params).getPage(),
                new EntityWrapper<${className}Entity>().eq("delete_state",Constant.DELETE_STATE_NO)
        );

        return new PageUtils(page);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void deleteByIds(String[] ids) {
        List<${className}Entity> ${className}List=new ArrayList<>();
        ${className}Entity ${classname}Entity=null;
        for(int i=0;i<ids.length;i++){
            ${classname}Entity=new ${className}Entity();
            ${classname}Entity.setId(ids[i]);
            ${classname}Entity.setModifyUserId(shiroTokenUtils.getUserId());
            ${classname}Entity.setModifyDate(new Date());
            ${classname}Entity.setDeleteState(Constant.DELETE_STATE_YES);
            ${className}List.add(${classname}Entity);
        }
        this.updateBatchById(${className}List);
    }

}
